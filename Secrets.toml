config = '''
let makeSearchConfig =
      λ(url : Text) →
        { index_server = url, search_servers = [ url ] }
let RedisCache = { redis_url : Text }
let Cache = < Redis : RedisCache | InMemory | None >
let Fs = { upload_dir : Text }
let S3 = { bucket_name : Text
, endpoint_url : Text
, region : Text
, force_path_style : Bool
, access_key : Text
, secret_access_key : Text
}
let Storage = < Fs : Fs | S3 : S3 >
let RedisMessaging = { redis_url : Text }
let Messaging = < Redis : RedisMessaging | InProcess >
let Oidc = { server_url : Text, client_id : Text, client_secret : Text }
let Kitsune = { index_server : Text, search_servers : List Text }
let Meilisearch = { instance_url : Text, api_key : Text }
let Search = < Kitsune : Kitsune | Meilisearch : Meilisearch | Sql | None >
let Allow = { domains : List Text }
let Deny = { domains : List Text }
let FederationFilter =  < Allow : Allow | Deny : Deny > 

in    { cache = Cache.InMemory
      , database = { max_connections = 10, url = "postgres://localhost/kitsune" }
      , instance =
            { name = "Kitsune"
            , description = "https://www.youtube.com/watch?v=6lnnPnr_0SU"
            , character_limit = 5000
	    , federation_filter = FederationFilter.Deny { domains = [] : List Text }
	    , registrations_open = True 
            }
      , messaging = Messaging.InProcess
      , server =
            { frontend_dir = "./kitsune-fe/dist"
            , job_workers = 20
            , max_upload_size = 5 * 1024 * 1024 {- Maximum upload size in bytes -}
            , media_proxy_enabled = False {- This will proxy all remote attachments through Kitsune, enabling caching and better privacy for the users -}
            , port = 5000
	    , oidc = None Oidc
            , prometheus_port = 9000
            }
      , search = Search.Sql
      , storage = Storage.Fs { upload_dir = "./uploads" }
      , url = { scheme = "https", domain = "kitsune-test.shuttleapp.rs" }
      }
'''
